syntax = "proto3";

package task.v1beta;

message Task {
  string name = 1;
  repeated Field fields = 2;
  string due_date = 3;
  bool done = 4;
}

message Field {
  string name = 1;
  string value = 2;
  FieldType type = 3;
}

service TaskService {
  rpc ListTasks(ListTasksRequest) returns (ListTasksResponse) {}
  rpc GetTask(GetTaskRequest) returns (TaskResponse) {}
  rpc CreateTask(CreateTaskRequest) returns (TaskResponse) {}
  rpc UpdateTask(UpdateTaskRequest) returns (TaskResponse) {}
  rpc DeleteTask(DeleteTaskRequest) returns (TaskResponse) {}

  rpc UpdateDate(UpdateDateRequest) returns (TaskResponse) {}

  rpc StreamTasks(StreamTasksRequest) returns (stream StreamTasksResponse) {}
}

service FieldService {
  rpc AddField(AddFieldRequest) returns (TaskResponse) {}
  rpc RemoveField(RemoveFieldRequest) returns (TaskResponse) {}
}

service UsageService {
  rpc Using(UsageRequest) returns (UsageResponse) {}
  rpc UsingStream(UsageRequest) returns (stream UsageResponse) {}
}

enum FieldType {
  FIELD_TYPE_STRING = 0;
}

message AddFieldRequest {
  string task_name = 1;
  string field_name = 2;
  string field_value = 3;
  FieldType field_type = 4;
}

message UpdateDateRequest {
  string task_name = 1;
  string due_date = 2;
}

message RemoveFieldRequest {
  string task_name = 1;
  string field_name = 2;
}

enum EventType {
  EVENT_TYPE_CLICK = 0;
  EVENT_TYPE_CREATE = 1;
  EVENT_TYPE_UPDATE = 2;
  EVENT_TYPE_DELETE = 3;
}

message UsageRequest {
  string username = 1;
  string task_name = 2;
  EventType event_type = 3;
}

message UsageResponse {
  string username = 1;
  string task_name = 2;
  EventType event_type = 3;
}

message StreamTasksRequest {}

message StreamTasksResponse {
  Task task = 1;
  string event_type = 2;
}

message ListTasksRequest {
  // The parent resource name, for example, "shelves/shelf1"
  string parent = 1;

  // The maximum number of items to return.
  int32 page_size = 2;

  // The next_page_token value returned from a previous List request, if any.
  string page_token = 3;
}

message ListTasksResponse {
  // The field name should match the noun "Task" in the method name.
  // There will be a maximum number of items returned based on the page_size field in the request.
  repeated Task tasks = 1;

  // Token to retrieve the next page of results, or empty if there are no more results in the list.
  string next_page_token = 2;
}

message GetTaskRequest {
  // The field will contain name of the resource requested.
  string name = 1;
}
message TaskResponse {
  Task task = 1;
}

message CreateTaskRequest {
  // The parent resource name where the Task is to be created.
  string parent = 1;

  // The Task id to use for this Task.
  string task_id = 2;

  // The Task resource to create.
  // The field name should match the Noun in the method name.
  Task task = 3;
}

message UpdateTaskRequest {
  // The Task resource which replaces the resource on the server.
  Task task = 1;
}

message DeleteTaskRequest {
  // The resource name of the Task to be deleted.
  string name = 1;
}
