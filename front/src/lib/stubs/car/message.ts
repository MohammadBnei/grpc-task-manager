// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "car/message.proto" (package "car", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message car.Car
 */
export interface Car {
    /**
     * @generated from protobuf field: int32 car_id = 1;
     */
    carId: number;
    /**
     * @generated from protobuf field: int32 driver_id = 2;
     */
    driverId: number;
    /**
     * @generated from protobuf field: string brand = 3;
     */
    brand: string;
    /**
     * @generated from protobuf field: string model = 4;
     */
    model: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Car$Type extends MessageType<Car> {
    constructor() {
        super("car.Car", [
            { no: 1, name: "car_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "driver_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "brand", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "model", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Car>): Car {
        const message = { carId: 0, driverId: 0, brand: "", model: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Car>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Car): Car {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 car_id */ 1:
                    message.carId = reader.int32();
                    break;
                case /* int32 driver_id */ 2:
                    message.driverId = reader.int32();
                    break;
                case /* string brand */ 3:
                    message.brand = reader.string();
                    break;
                case /* string model */ 4:
                    message.model = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Car, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 car_id = 1; */
        if (message.carId !== 0)
            writer.tag(1, WireType.Varint).int32(message.carId);
        /* int32 driver_id = 2; */
        if (message.driverId !== 0)
            writer.tag(2, WireType.Varint).int32(message.driverId);
        /* string brand = 3; */
        if (message.brand !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.brand);
        /* string model = 4; */
        if (message.model !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.model);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.Car
 */
export const Car = new Car$Type();
