// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "car/request.proto" (package "car", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Car } from "./message";
/**
 * @generated from protobuf message car.ListCarsRequest
 */
export interface ListCarsRequest {
    /**
     * The maximum number of items to return.
     *
     * @generated from protobuf field: int32 page_size = 2;
     */
    pageSize: number;
    /**
     * The next_page_token value returned from a previous List request, if any.
     *
     * @generated from protobuf field: string page_token = 3;
     */
    pageToken: string;
}
/**
 * @generated from protobuf message car.ListCarsResponse
 */
export interface ListCarsResponse {
    /**
     * The field name should match the noun "Car" in the method name.
     * There will be a maximum number of items returned based on the page_size field in the request.
     *
     * @generated from protobuf field: repeated car.Car cars = 1;
     */
    cars: Car[];
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     *
     * @generated from protobuf field: string next_page_token = 2;
     */
    nextPageToken: string;
}
/**
 * @generated from protobuf message car.GetCarRequest
 */
export interface GetCarRequest {
    /**
     * The field will contain name of the resource requested.
     *
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message car.GetCarResponse
 */
export interface GetCarResponse {
    /**
     * @generated from protobuf field: car.Car car = 1;
     */
    car?: Car;
}
/**
 * @generated from protobuf message car.CreateCarRequest
 */
export interface CreateCarRequest {
    /**
     * The Car resource to create.
     *
     * @generated from protobuf field: car.Car car = 1;
     */
    car?: Car;
}
/**
 * @generated from protobuf message car.CreateCarResponse
 */
export interface CreateCarResponse {
    /**
     * @generated from protobuf field: car.Car car = 1;
     */
    car?: Car;
}
/**
 * @generated from protobuf message car.UpdateCarRequest
 */
export interface UpdateCarRequest {
    /**
     * @generated from protobuf field: int32 carId = 1;
     */
    carId: number;
    /**
     * The Car resource which replaces the resource on the server.
     *
     * @generated from protobuf field: car.Car car = 2;
     */
    car?: Car;
}
/**
 * @generated from protobuf message car.UpdateCarResponse
 */
export interface UpdateCarResponse {
    /**
     * @generated from protobuf field: car.Car car = 1;
     */
    car?: Car;
}
/**
 * @generated from protobuf message car.DeleteCarRequest
 */
export interface DeleteCarRequest {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message car.DeleteCarResponse
 */
export interface DeleteCarResponse {
    /**
     * @generated from protobuf field: car.Car car = 1;
     */
    car?: Car;
}
// @generated message type with reflection information, may provide speed optimized methods
class ListCarsRequest$Type extends MessageType<ListCarsRequest> {
    constructor() {
        super("car.ListCarsRequest", [
            { no: 2, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListCarsRequest>): ListCarsRequest {
        const message = { pageSize: 0, pageToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListCarsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCarsRequest): ListCarsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 page_size */ 2:
                    message.pageSize = reader.int32();
                    break;
                case /* string page_token */ 3:
                    message.pageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCarsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 page_size = 2; */
        if (message.pageSize !== 0)
            writer.tag(2, WireType.Varint).int32(message.pageSize);
        /* string page_token = 3; */
        if (message.pageToken !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.pageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.ListCarsRequest
 */
export const ListCarsRequest = new ListCarsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCarsResponse$Type extends MessageType<ListCarsResponse> {
    constructor() {
        super("car.ListCarsResponse", [
            { no: 1, name: "cars", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Car },
            { no: 2, name: "next_page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListCarsResponse>): ListCarsResponse {
        const message = { cars: [], nextPageToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListCarsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCarsResponse): ListCarsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated car.Car cars */ 1:
                    message.cars.push(Car.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string next_page_token */ 2:
                    message.nextPageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCarsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated car.Car cars = 1; */
        for (let i = 0; i < message.cars.length; i++)
            Car.internalBinaryWrite(message.cars[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string next_page_token = 2; */
        if (message.nextPageToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nextPageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.ListCarsResponse
 */
export const ListCarsResponse = new ListCarsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCarRequest$Type extends MessageType<GetCarRequest> {
    constructor() {
        super("car.GetCarRequest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetCarRequest>): GetCarRequest {
        const message = { id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCarRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCarRequest): GetCarRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCarRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.GetCarRequest
 */
export const GetCarRequest = new GetCarRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCarResponse$Type extends MessageType<GetCarResponse> {
    constructor() {
        super("car.GetCarResponse", [
            { no: 1, name: "car", kind: "message", T: () => Car }
        ]);
    }
    create(value?: PartialMessage<GetCarResponse>): GetCarResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCarResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCarResponse): GetCarResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* car.Car car */ 1:
                    message.car = Car.internalBinaryRead(reader, reader.uint32(), options, message.car);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCarResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* car.Car car = 1; */
        if (message.car)
            Car.internalBinaryWrite(message.car, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.GetCarResponse
 */
export const GetCarResponse = new GetCarResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateCarRequest$Type extends MessageType<CreateCarRequest> {
    constructor() {
        super("car.CreateCarRequest", [
            { no: 1, name: "car", kind: "message", T: () => Car }
        ]);
    }
    create(value?: PartialMessage<CreateCarRequest>): CreateCarRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateCarRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateCarRequest): CreateCarRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* car.Car car */ 1:
                    message.car = Car.internalBinaryRead(reader, reader.uint32(), options, message.car);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateCarRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* car.Car car = 1; */
        if (message.car)
            Car.internalBinaryWrite(message.car, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.CreateCarRequest
 */
export const CreateCarRequest = new CreateCarRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateCarResponse$Type extends MessageType<CreateCarResponse> {
    constructor() {
        super("car.CreateCarResponse", [
            { no: 1, name: "car", kind: "message", T: () => Car }
        ]);
    }
    create(value?: PartialMessage<CreateCarResponse>): CreateCarResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateCarResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateCarResponse): CreateCarResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* car.Car car */ 1:
                    message.car = Car.internalBinaryRead(reader, reader.uint32(), options, message.car);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateCarResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* car.Car car = 1; */
        if (message.car)
            Car.internalBinaryWrite(message.car, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.CreateCarResponse
 */
export const CreateCarResponse = new CreateCarResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateCarRequest$Type extends MessageType<UpdateCarRequest> {
    constructor() {
        super("car.UpdateCarRequest", [
            { no: 1, name: "carId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "car", kind: "message", T: () => Car }
        ]);
    }
    create(value?: PartialMessage<UpdateCarRequest>): UpdateCarRequest {
        const message = { carId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateCarRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateCarRequest): UpdateCarRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 carId */ 1:
                    message.carId = reader.int32();
                    break;
                case /* car.Car car */ 2:
                    message.car = Car.internalBinaryRead(reader, reader.uint32(), options, message.car);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateCarRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 carId = 1; */
        if (message.carId !== 0)
            writer.tag(1, WireType.Varint).int32(message.carId);
        /* car.Car car = 2; */
        if (message.car)
            Car.internalBinaryWrite(message.car, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.UpdateCarRequest
 */
export const UpdateCarRequest = new UpdateCarRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateCarResponse$Type extends MessageType<UpdateCarResponse> {
    constructor() {
        super("car.UpdateCarResponse", [
            { no: 1, name: "car", kind: "message", T: () => Car }
        ]);
    }
    create(value?: PartialMessage<UpdateCarResponse>): UpdateCarResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateCarResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateCarResponse): UpdateCarResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* car.Car car */ 1:
                    message.car = Car.internalBinaryRead(reader, reader.uint32(), options, message.car);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateCarResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* car.Car car = 1; */
        if (message.car)
            Car.internalBinaryWrite(message.car, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.UpdateCarResponse
 */
export const UpdateCarResponse = new UpdateCarResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCarRequest$Type extends MessageType<DeleteCarRequest> {
    constructor() {
        super("car.DeleteCarRequest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteCarRequest>): DeleteCarRequest {
        const message = { id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteCarRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCarRequest): DeleteCarRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteCarRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.DeleteCarRequest
 */
export const DeleteCarRequest = new DeleteCarRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCarResponse$Type extends MessageType<DeleteCarResponse> {
    constructor() {
        super("car.DeleteCarResponse", [
            { no: 1, name: "car", kind: "message", T: () => Car }
        ]);
    }
    create(value?: PartialMessage<DeleteCarResponse>): DeleteCarResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteCarResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCarResponse): DeleteCarResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* car.Car car */ 1:
                    message.car = Car.internalBinaryRead(reader, reader.uint32(), options, message.car);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteCarResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* car.Car car = 1; */
        if (message.car)
            Car.internalBinaryWrite(message.car, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.DeleteCarResponse
 */
export const DeleteCarResponse = new DeleteCarResponse$Type();
