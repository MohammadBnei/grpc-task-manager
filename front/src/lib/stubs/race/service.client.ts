// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "race/service.proto" (package "race", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { RaceService } from "./service";
import type { UnSubscribeRaceParticipationResponse } from "./request";
import type { UnSubscribeRaceParticipationRequest } from "./request";
import type { SubscribeRaceParticipationResponse } from "./request";
import type { SubscribeRaceParticipationRequest } from "./request";
import type { DeleteRaceResponse } from "./request";
import type { DeleteRaceRequest } from "./request";
import type { UpdateRaceResponse } from "./request";
import type { UpdateRaceRequest } from "./request";
import type { CreateRaceResponse } from "./request";
import type { CreateRaceRequest } from "./request";
import type { GetRaceResponse } from "./request";
import type { GetRaceRequest } from "./request";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListRacesResponse } from "./request";
import type { ListRacesRequest } from "./request";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service race.RaceService
 */
export interface IRaceServiceClient {
    /**
     * @generated from protobuf rpc: ListRaces(race.ListRacesRequest) returns (race.ListRacesResponse);
     */
    listRaces(input: ListRacesRequest, options?: RpcOptions): UnaryCall<ListRacesRequest, ListRacesResponse>;
    /**
     * @generated from protobuf rpc: GetRace(race.GetRaceRequest) returns (race.GetRaceResponse);
     */
    getRace(input: GetRaceRequest, options?: RpcOptions): UnaryCall<GetRaceRequest, GetRaceResponse>;
    /**
     * @generated from protobuf rpc: CreateRace(race.CreateRaceRequest) returns (race.CreateRaceResponse);
     */
    createRace(input: CreateRaceRequest, options?: RpcOptions): UnaryCall<CreateRaceRequest, CreateRaceResponse>;
    /**
     * @generated from protobuf rpc: UpdateRace(race.UpdateRaceRequest) returns (race.UpdateRaceResponse);
     */
    updateRace(input: UpdateRaceRequest, options?: RpcOptions): UnaryCall<UpdateRaceRequest, UpdateRaceResponse>;
    /**
     * @generated from protobuf rpc: DeleteRace(race.DeleteRaceRequest) returns (race.DeleteRaceResponse);
     */
    deleteRace(input: DeleteRaceRequest, options?: RpcOptions): UnaryCall<DeleteRaceRequest, DeleteRaceResponse>;
    /**
     * @generated from protobuf rpc: SubscribeRaceParticipation(race.SubscribeRaceParticipationRequest) returns (race.SubscribeRaceParticipationResponse);
     */
    subscribeRaceParticipation(input: SubscribeRaceParticipationRequest, options?: RpcOptions): UnaryCall<SubscribeRaceParticipationRequest, SubscribeRaceParticipationResponse>;
    /**
     * @generated from protobuf rpc: UnSubscribeRaceParticipation(race.UnSubscribeRaceParticipationRequest) returns (race.UnSubscribeRaceParticipationResponse);
     */
    unSubscribeRaceParticipation(input: UnSubscribeRaceParticipationRequest, options?: RpcOptions): UnaryCall<UnSubscribeRaceParticipationRequest, UnSubscribeRaceParticipationResponse>;
}
/**
 * @generated from protobuf service race.RaceService
 */
export class RaceServiceClient implements IRaceServiceClient, ServiceInfo {
    typeName = RaceService.typeName;
    methods = RaceService.methods;
    options = RaceService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ListRaces(race.ListRacesRequest) returns (race.ListRacesResponse);
     */
    listRaces(input: ListRacesRequest, options?: RpcOptions): UnaryCall<ListRacesRequest, ListRacesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListRacesRequest, ListRacesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetRace(race.GetRaceRequest) returns (race.GetRaceResponse);
     */
    getRace(input: GetRaceRequest, options?: RpcOptions): UnaryCall<GetRaceRequest, GetRaceResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRaceRequest, GetRaceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateRace(race.CreateRaceRequest) returns (race.CreateRaceResponse);
     */
    createRace(input: CreateRaceRequest, options?: RpcOptions): UnaryCall<CreateRaceRequest, CreateRaceResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateRaceRequest, CreateRaceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateRace(race.UpdateRaceRequest) returns (race.UpdateRaceResponse);
     */
    updateRace(input: UpdateRaceRequest, options?: RpcOptions): UnaryCall<UpdateRaceRequest, UpdateRaceResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateRaceRequest, UpdateRaceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteRace(race.DeleteRaceRequest) returns (race.DeleteRaceResponse);
     */
    deleteRace(input: DeleteRaceRequest, options?: RpcOptions): UnaryCall<DeleteRaceRequest, DeleteRaceResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteRaceRequest, DeleteRaceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SubscribeRaceParticipation(race.SubscribeRaceParticipationRequest) returns (race.SubscribeRaceParticipationResponse);
     */
    subscribeRaceParticipation(input: SubscribeRaceParticipationRequest, options?: RpcOptions): UnaryCall<SubscribeRaceParticipationRequest, SubscribeRaceParticipationResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeRaceParticipationRequest, SubscribeRaceParticipationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UnSubscribeRaceParticipation(race.UnSubscribeRaceParticipationRequest) returns (race.UnSubscribeRaceParticipationResponse);
     */
    unSubscribeRaceParticipation(input: UnSubscribeRaceParticipationRequest, options?: RpcOptions): UnaryCall<UnSubscribeRaceParticipationRequest, UnSubscribeRaceParticipationResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<UnSubscribeRaceParticipationRequest, UnSubscribeRaceParticipationResponse>("unary", this._transport, method, opt, input);
    }
}
