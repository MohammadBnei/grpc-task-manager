// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "race/request.proto" (package "race", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Race } from "./message";
/**
 * @generated from protobuf message race.ListRacesRequest
 */
export interface ListRacesRequest {
    /**
     * The parent resource name, for example, "shelves/shelf1"
     *
     * @generated from protobuf field: string parent = 1;
     */
    parent: string;
    /**
     * The maximum number of items to return.
     *
     * @generated from protobuf field: int32 page_size = 2;
     */
    pageSize: number;
    /**
     * The next_page_token value returned from a previous List request, if any.
     *
     * @generated from protobuf field: string page_token = 3;
     */
    pageToken: string;
}
/**
 * @generated from protobuf message race.ListRacesResponse
 */
export interface ListRacesResponse {
    /**
     * The field name should match the noun "Race" in the method name.
     * There will be a maximum number of items returned based on the page_size field in the request.
     *
     * @generated from protobuf field: repeated race.Race races = 1;
     */
    races: Race[];
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     *
     * @generated from protobuf field: string next_page_token = 2;
     */
    nextPageToken: string;
}
/**
 * @generated from protobuf message race.GetRaceRequest
 */
export interface GetRaceRequest {
    /**
     * The field will contain name of the resource requested.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message race.GetRaceResponse
 */
export interface GetRaceResponse {
    /**
     * @generated from protobuf field: race.Race race = 1;
     */
    race?: Race;
}
/**
 * @generated from protobuf message race.CreateRaceRequest
 */
export interface CreateRaceRequest {
    /**
     * The parent resource name where the Race is to be created.
     *
     * @generated from protobuf field: string parent = 1;
     */
    parent: string;
    /**
     * The Race id to use for this Race.
     *
     * @generated from protobuf field: string race_id = 2;
     */
    raceId: string;
    /**
     * The Race resource to create.
     * The field name should match the Noun in the method name.
     *
     * @generated from protobuf field: race.Race race = 3;
     */
    race?: Race;
}
/**
 * @generated from protobuf message race.CreateRaceResponse
 */
export interface CreateRaceResponse {
    /**
     * @generated from protobuf field: race.Race race = 1;
     */
    race?: Race;
}
/**
 * @generated from protobuf message race.UpdateRaceRequest
 */
export interface UpdateRaceRequest {
    /**
     * The Race resource which replaces the resource on the server.
     *
     * @generated from protobuf field: race.Race race = 1;
     */
    race?: Race;
}
/**
 * @generated from protobuf message race.UpdateRaceResponse
 */
export interface UpdateRaceResponse {
    /**
     * @generated from protobuf field: race.Race race = 1;
     */
    race?: Race;
}
/**
 * @generated from protobuf message race.DeleteRaceRequest
 */
export interface DeleteRaceRequest {
    /**
     * The resource name of the Race to be deleted.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message race.DeleteRaceResponse
 */
export interface DeleteRaceResponse {
    /**
     * @generated from protobuf field: race.Race race = 1;
     */
    race?: Race;
}
// @generated message type with reflection information, may provide speed optimized methods
class ListRacesRequest$Type extends MessageType<ListRacesRequest> {
    constructor() {
        super("race.ListRacesRequest", [
            { no: 1, name: "parent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListRacesRequest>): ListRacesRequest {
        const message = { parent: "", pageSize: 0, pageToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListRacesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRacesRequest): ListRacesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string parent */ 1:
                    message.parent = reader.string();
                    break;
                case /* int32 page_size */ 2:
                    message.pageSize = reader.int32();
                    break;
                case /* string page_token */ 3:
                    message.pageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRacesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string parent = 1; */
        if (message.parent !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.parent);
        /* int32 page_size = 2; */
        if (message.pageSize !== 0)
            writer.tag(2, WireType.Varint).int32(message.pageSize);
        /* string page_token = 3; */
        if (message.pageToken !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.pageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message race.ListRacesRequest
 */
export const ListRacesRequest = new ListRacesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRacesResponse$Type extends MessageType<ListRacesResponse> {
    constructor() {
        super("race.ListRacesResponse", [
            { no: 1, name: "races", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Race },
            { no: 2, name: "next_page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListRacesResponse>): ListRacesResponse {
        const message = { races: [], nextPageToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListRacesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRacesResponse): ListRacesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated race.Race races */ 1:
                    message.races.push(Race.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string next_page_token */ 2:
                    message.nextPageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRacesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated race.Race races = 1; */
        for (let i = 0; i < message.races.length; i++)
            Race.internalBinaryWrite(message.races[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string next_page_token = 2; */
        if (message.nextPageToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nextPageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message race.ListRacesResponse
 */
export const ListRacesResponse = new ListRacesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRaceRequest$Type extends MessageType<GetRaceRequest> {
    constructor() {
        super("race.GetRaceRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetRaceRequest>): GetRaceRequest {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetRaceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRaceRequest): GetRaceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRaceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message race.GetRaceRequest
 */
export const GetRaceRequest = new GetRaceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRaceResponse$Type extends MessageType<GetRaceResponse> {
    constructor() {
        super("race.GetRaceResponse", [
            { no: 1, name: "race", kind: "message", T: () => Race }
        ]);
    }
    create(value?: PartialMessage<GetRaceResponse>): GetRaceResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetRaceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRaceResponse): GetRaceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* race.Race race */ 1:
                    message.race = Race.internalBinaryRead(reader, reader.uint32(), options, message.race);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRaceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* race.Race race = 1; */
        if (message.race)
            Race.internalBinaryWrite(message.race, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message race.GetRaceResponse
 */
export const GetRaceResponse = new GetRaceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRaceRequest$Type extends MessageType<CreateRaceRequest> {
    constructor() {
        super("race.CreateRaceRequest", [
            { no: 1, name: "parent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "race_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "race", kind: "message", T: () => Race }
        ]);
    }
    create(value?: PartialMessage<CreateRaceRequest>): CreateRaceRequest {
        const message = { parent: "", raceId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateRaceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRaceRequest): CreateRaceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string parent */ 1:
                    message.parent = reader.string();
                    break;
                case /* string race_id */ 2:
                    message.raceId = reader.string();
                    break;
                case /* race.Race race */ 3:
                    message.race = Race.internalBinaryRead(reader, reader.uint32(), options, message.race);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateRaceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string parent = 1; */
        if (message.parent !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.parent);
        /* string race_id = 2; */
        if (message.raceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.raceId);
        /* race.Race race = 3; */
        if (message.race)
            Race.internalBinaryWrite(message.race, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message race.CreateRaceRequest
 */
export const CreateRaceRequest = new CreateRaceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRaceResponse$Type extends MessageType<CreateRaceResponse> {
    constructor() {
        super("race.CreateRaceResponse", [
            { no: 1, name: "race", kind: "message", T: () => Race }
        ]);
    }
    create(value?: PartialMessage<CreateRaceResponse>): CreateRaceResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateRaceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRaceResponse): CreateRaceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* race.Race race */ 1:
                    message.race = Race.internalBinaryRead(reader, reader.uint32(), options, message.race);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateRaceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* race.Race race = 1; */
        if (message.race)
            Race.internalBinaryWrite(message.race, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message race.CreateRaceResponse
 */
export const CreateRaceResponse = new CreateRaceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateRaceRequest$Type extends MessageType<UpdateRaceRequest> {
    constructor() {
        super("race.UpdateRaceRequest", [
            { no: 1, name: "race", kind: "message", T: () => Race }
        ]);
    }
    create(value?: PartialMessage<UpdateRaceRequest>): UpdateRaceRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateRaceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateRaceRequest): UpdateRaceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* race.Race race */ 1:
                    message.race = Race.internalBinaryRead(reader, reader.uint32(), options, message.race);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateRaceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* race.Race race = 1; */
        if (message.race)
            Race.internalBinaryWrite(message.race, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message race.UpdateRaceRequest
 */
export const UpdateRaceRequest = new UpdateRaceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateRaceResponse$Type extends MessageType<UpdateRaceResponse> {
    constructor() {
        super("race.UpdateRaceResponse", [
            { no: 1, name: "race", kind: "message", T: () => Race }
        ]);
    }
    create(value?: PartialMessage<UpdateRaceResponse>): UpdateRaceResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateRaceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateRaceResponse): UpdateRaceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* race.Race race */ 1:
                    message.race = Race.internalBinaryRead(reader, reader.uint32(), options, message.race);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateRaceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* race.Race race = 1; */
        if (message.race)
            Race.internalBinaryWrite(message.race, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message race.UpdateRaceResponse
 */
export const UpdateRaceResponse = new UpdateRaceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRaceRequest$Type extends MessageType<DeleteRaceRequest> {
    constructor() {
        super("race.DeleteRaceRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteRaceRequest>): DeleteRaceRequest {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteRaceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRaceRequest): DeleteRaceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRaceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message race.DeleteRaceRequest
 */
export const DeleteRaceRequest = new DeleteRaceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRaceResponse$Type extends MessageType<DeleteRaceResponse> {
    constructor() {
        super("race.DeleteRaceResponse", [
            { no: 1, name: "race", kind: "message", T: () => Race }
        ]);
    }
    create(value?: PartialMessage<DeleteRaceResponse>): DeleteRaceResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteRaceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRaceResponse): DeleteRaceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* race.Race race */ 1:
                    message.race = Race.internalBinaryRead(reader, reader.uint32(), options, message.race);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRaceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* race.Race race = 1; */
        if (message.race)
            Race.internalBinaryWrite(message.race, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message race.DeleteRaceResponse
 */
export const DeleteRaceResponse = new DeleteRaceResponse$Type();
