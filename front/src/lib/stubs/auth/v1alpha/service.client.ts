// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "auth/v1alpha/service.proto" (package "auth.v1alpha", syntax proto3)
// tslint:disable
import type { RpcTransport } from '@protobuf-ts/runtime-rpc';
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc';
import { AuthService } from './service';
import type { ValidateResponse } from './message';
import type { ValidateRequest } from './message';
import type { RefreshTokenResponse } from './message';
import type { RefreshTokenRequest } from './message';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type { LoginResponse } from './message';
import type { LoginRequest } from './message';
import type { UnaryCall } from '@protobuf-ts/runtime-rpc';
import type { RpcOptions } from '@protobuf-ts/runtime-rpc';
/**
 * @generated from protobuf service auth.v1alpha.AuthService
 */
export interface IAuthServiceClient {
	/**
	 * @generated from protobuf rpc: Login(auth.v1alpha.LoginRequest) returns (auth.v1alpha.LoginResponse);
	 */
	login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse>;
	/**
	 * @generated from protobuf rpc: RefreshToken(auth.v1alpha.RefreshTokenRequest) returns (auth.v1alpha.RefreshTokenResponse);
	 */
	refreshToken(
		input: RefreshTokenRequest,
		options?: RpcOptions
	): UnaryCall<RefreshTokenRequest, RefreshTokenResponse>;
	/**
	 * @generated from protobuf rpc: Validate(auth.v1alpha.ValidateRequest) returns (auth.v1alpha.ValidateResponse);
	 */
	validate(
		input: ValidateRequest,
		options?: RpcOptions
	): UnaryCall<ValidateRequest, ValidateResponse>;
}
/**
 * @generated from protobuf service auth.v1alpha.AuthService
 */
export class AuthServiceClient implements IAuthServiceClient, ServiceInfo {
	typeName = AuthService.typeName;
	methods = AuthService.methods;
	options = AuthService.options;
	constructor(private readonly _transport: RpcTransport) {}
	/**
	 * @generated from protobuf rpc: Login(auth.v1alpha.LoginRequest) returns (auth.v1alpha.LoginResponse);
	 */
	login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse> {
		const method = this.methods[0],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<LoginRequest, LoginResponse>(
			'unary',
			this._transport,
			method,
			opt,
			input
		);
	}
	/**
	 * @generated from protobuf rpc: RefreshToken(auth.v1alpha.RefreshTokenRequest) returns (auth.v1alpha.RefreshTokenResponse);
	 */
	refreshToken(
		input: RefreshTokenRequest,
		options?: RpcOptions
	): UnaryCall<RefreshTokenRequest, RefreshTokenResponse> {
		const method = this.methods[1],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<RefreshTokenRequest, RefreshTokenResponse>(
			'unary',
			this._transport,
			method,
			opt,
			input
		);
	}
	/**
	 * @generated from protobuf rpc: Validate(auth.v1alpha.ValidateRequest) returns (auth.v1alpha.ValidateResponse);
	 */
	validate(
		input: ValidateRequest,
		options?: RpcOptions
	): UnaryCall<ValidateRequest, ValidateResponse> {
		const method = this.methods[2],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<ValidateRequest, ValidateResponse>(
			'unary',
			this._transport,
			method,
			opt,
			input
		);
	}
}
