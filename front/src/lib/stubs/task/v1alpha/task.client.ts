// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "task/v1alpha/task.proto" (package "task.v1alpha", syntax proto3)
// tslint:disable
import { UsageService } from './task';
import type { UsageResponse } from './task';
import type { UsageRequest } from './task';
import type { RpcTransport } from '@protobuf-ts/runtime-rpc';
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc';
import { TaskService } from './task';
import type { StreamTasksResponse } from './task';
import type { StreamTasksRequest } from './task';
import type { ServerStreamingCall } from '@protobuf-ts/runtime-rpc';
import type { DeleteTaskRequest } from './task';
import type { UpdateTaskRequest } from './task';
import type { CreateTaskRequest } from './task';
import type { Task } from './task';
import type { GetTaskRequest } from './task';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type { ListTasksResponse } from './task';
import type { ListTasksRequest } from './task';
import type { UnaryCall } from '@protobuf-ts/runtime-rpc';
import type { RpcOptions } from '@protobuf-ts/runtime-rpc';
/**
 * @generated from protobuf service task.v1alpha.TaskService
 */
export interface ITaskServiceClient {
	/**
	 * @generated from protobuf rpc: ListTasks(task.v1alpha.ListTasksRequest) returns (task.v1alpha.ListTasksResponse);
	 */
	listTasks(
		input: ListTasksRequest,
		options?: RpcOptions
	): UnaryCall<ListTasksRequest, ListTasksResponse>;
	/**
	 * @generated from protobuf rpc: GetTask(task.v1alpha.GetTaskRequest) returns (task.v1alpha.Task);
	 */
	getTask(input: GetTaskRequest, options?: RpcOptions): UnaryCall<GetTaskRequest, Task>;
	/**
	 * @generated from protobuf rpc: CreateTask(task.v1alpha.CreateTaskRequest) returns (task.v1alpha.Task);
	 */
	createTask(input: CreateTaskRequest, options?: RpcOptions): UnaryCall<CreateTaskRequest, Task>;
	/**
	 * @generated from protobuf rpc: UpdateTask(task.v1alpha.UpdateTaskRequest) returns (task.v1alpha.Task);
	 */
	updateTask(input: UpdateTaskRequest, options?: RpcOptions): UnaryCall<UpdateTaskRequest, Task>;
	/**
	 * @generated from protobuf rpc: DeleteTask(task.v1alpha.DeleteTaskRequest) returns (task.v1alpha.Task);
	 */
	deleteTask(input: DeleteTaskRequest, options?: RpcOptions): UnaryCall<DeleteTaskRequest, Task>;
	/**
	 * @generated from protobuf rpc: StreamTasks(task.v1alpha.StreamTasksRequest) returns (stream task.v1alpha.StreamTasksResponse);
	 */
	streamTasks(
		input: StreamTasksRequest,
		options?: RpcOptions
	): ServerStreamingCall<StreamTasksRequest, StreamTasksResponse>;
}
/**
 * @generated from protobuf service task.v1alpha.TaskService
 */
export class TaskServiceClient implements ITaskServiceClient, ServiceInfo {
	typeName = TaskService.typeName;
	methods = TaskService.methods;
	options = TaskService.options;
	constructor(private readonly _transport: RpcTransport) {}
	/**
	 * @generated from protobuf rpc: ListTasks(task.v1alpha.ListTasksRequest) returns (task.v1alpha.ListTasksResponse);
	 */
	listTasks(
		input: ListTasksRequest,
		options?: RpcOptions
	): UnaryCall<ListTasksRequest, ListTasksResponse> {
		const method = this.methods[0],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<ListTasksRequest, ListTasksResponse>(
			'unary',
			this._transport,
			method,
			opt,
			input
		);
	}
	/**
	 * @generated from protobuf rpc: GetTask(task.v1alpha.GetTaskRequest) returns (task.v1alpha.Task);
	 */
	getTask(input: GetTaskRequest, options?: RpcOptions): UnaryCall<GetTaskRequest, Task> {
		const method = this.methods[1],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<GetTaskRequest, Task>('unary', this._transport, method, opt, input);
	}
	/**
	 * @generated from protobuf rpc: CreateTask(task.v1alpha.CreateTaskRequest) returns (task.v1alpha.Task);
	 */
	createTask(input: CreateTaskRequest, options?: RpcOptions): UnaryCall<CreateTaskRequest, Task> {
		const method = this.methods[2],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<CreateTaskRequest, Task>('unary', this._transport, method, opt, input);
	}
	/**
	 * @generated from protobuf rpc: UpdateTask(task.v1alpha.UpdateTaskRequest) returns (task.v1alpha.Task);
	 */
	updateTask(input: UpdateTaskRequest, options?: RpcOptions): UnaryCall<UpdateTaskRequest, Task> {
		const method = this.methods[3],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<UpdateTaskRequest, Task>('unary', this._transport, method, opt, input);
	}
	/**
	 * @generated from protobuf rpc: DeleteTask(task.v1alpha.DeleteTaskRequest) returns (task.v1alpha.Task);
	 */
	deleteTask(input: DeleteTaskRequest, options?: RpcOptions): UnaryCall<DeleteTaskRequest, Task> {
		const method = this.methods[4],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<DeleteTaskRequest, Task>('unary', this._transport, method, opt, input);
	}
	/**
	 * @generated from protobuf rpc: StreamTasks(task.v1alpha.StreamTasksRequest) returns (stream task.v1alpha.StreamTasksResponse);
	 */
	streamTasks(
		input: StreamTasksRequest,
		options?: RpcOptions
	): ServerStreamingCall<StreamTasksRequest, StreamTasksResponse> {
		const method = this.methods[5],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<StreamTasksRequest, StreamTasksResponse>(
			'serverStreaming',
			this._transport,
			method,
			opt,
			input
		);
	}
}
/**
 * @generated from protobuf service task.v1alpha.UsageService
 */
export interface IUsageServiceClient {
	/**
	 * @generated from protobuf rpc: Using(task.v1alpha.UsageRequest) returns (task.v1alpha.UsageResponse);
	 */
	using(input: UsageRequest, options?: RpcOptions): UnaryCall<UsageRequest, UsageResponse>;
	/**
	 * @generated from protobuf rpc: UsingStream(task.v1alpha.UsageRequest) returns (stream task.v1alpha.UsageResponse);
	 */
	usingStream(
		input: UsageRequest,
		options?: RpcOptions
	): ServerStreamingCall<UsageRequest, UsageResponse>;
}
/**
 * @generated from protobuf service task.v1alpha.UsageService
 */
export class UsageServiceClient implements IUsageServiceClient, ServiceInfo {
	typeName = UsageService.typeName;
	methods = UsageService.methods;
	options = UsageService.options;
	constructor(private readonly _transport: RpcTransport) {}
	/**
	 * @generated from protobuf rpc: Using(task.v1alpha.UsageRequest) returns (task.v1alpha.UsageResponse);
	 */
	using(input: UsageRequest, options?: RpcOptions): UnaryCall<UsageRequest, UsageResponse> {
		const method = this.methods[0],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<UsageRequest, UsageResponse>(
			'unary',
			this._transport,
			method,
			opt,
			input
		);
	}
	/**
	 * @generated from protobuf rpc: UsingStream(task.v1alpha.UsageRequest) returns (stream task.v1alpha.UsageResponse);
	 */
	usingStream(
		input: UsageRequest,
		options?: RpcOptions
	): ServerStreamingCall<UsageRequest, UsageResponse> {
		const method = this.methods[1],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<UsageRequest, UsageResponse>(
			'serverStreaming',
			this._transport,
			method,
			opt,
			input
		);
	}
}
