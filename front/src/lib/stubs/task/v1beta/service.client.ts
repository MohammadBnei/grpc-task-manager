// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "task/v1beta/service.proto" (package "task.v1beta", syntax proto3)
// tslint:disable
import { UsageService } from './service';
import type { UsingStreamResponse } from './request';
import type { UsingStreamRequest } from './request';
import type { UsingResponse } from './request';
import type { UsingRequest } from './request';
import { FieldService } from './service';
import type { RemoveFieldResponse } from './request';
import type { RemoveFieldRequest } from './request';
import type { AddFieldResponse } from './request';
import type { AddFieldRequest } from './request';
import type { RpcTransport } from '@protobuf-ts/runtime-rpc';
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc';
import { TaskService } from './service';
import type { StreamTasksResponse } from './request';
import type { StreamTasksRequest } from './request';
import type { ServerStreamingCall } from '@protobuf-ts/runtime-rpc';
import type { UpdateDateResponse } from './request';
import type { UpdateDateRequest } from './request';
import type { DeleteTaskResponse } from './request';
import type { DeleteTaskRequest } from './request';
import type { UpdateTaskResponse } from './request';
import type { UpdateTaskRequest } from './request';
import type { CreateTaskResponse } from './request';
import type { CreateTaskRequest } from './request';
import type { GetTaskResponse } from './request';
import type { GetTaskRequest } from './request';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type { ListTasksResponse } from './request';
import type { ListTasksRequest } from './request';
import type { UnaryCall } from '@protobuf-ts/runtime-rpc';
import type { RpcOptions } from '@protobuf-ts/runtime-rpc';
/**
 * @generated from protobuf service task.v1beta.TaskService
 */
export interface ITaskServiceClient {
	/**
	 * @generated from protobuf rpc: ListTasks(task.v1beta.ListTasksRequest) returns (task.v1beta.ListTasksResponse);
	 */
	listTasks(
		input: ListTasksRequest,
		options?: RpcOptions
	): UnaryCall<ListTasksRequest, ListTasksResponse>;
	/**
	 * @generated from protobuf rpc: GetTask(task.v1beta.GetTaskRequest) returns (task.v1beta.GetTaskResponse);
	 */
	getTask(input: GetTaskRequest, options?: RpcOptions): UnaryCall<GetTaskRequest, GetTaskResponse>;
	/**
	 * @generated from protobuf rpc: CreateTask(task.v1beta.CreateTaskRequest) returns (task.v1beta.CreateTaskResponse);
	 */
	createTask(
		input: CreateTaskRequest,
		options?: RpcOptions
	): UnaryCall<CreateTaskRequest, CreateTaskResponse>;
	/**
	 * @generated from protobuf rpc: UpdateTask(task.v1beta.UpdateTaskRequest) returns (task.v1beta.UpdateTaskResponse);
	 */
	updateTask(
		input: UpdateTaskRequest,
		options?: RpcOptions
	): UnaryCall<UpdateTaskRequest, UpdateTaskResponse>;
	/**
	 * @generated from protobuf rpc: DeleteTask(task.v1beta.DeleteTaskRequest) returns (task.v1beta.DeleteTaskResponse);
	 */
	deleteTask(
		input: DeleteTaskRequest,
		options?: RpcOptions
	): UnaryCall<DeleteTaskRequest, DeleteTaskResponse>;
	/**
	 * @generated from protobuf rpc: UpdateDate(task.v1beta.UpdateDateRequest) returns (task.v1beta.UpdateDateResponse);
	 */
	updateDate(
		input: UpdateDateRequest,
		options?: RpcOptions
	): UnaryCall<UpdateDateRequest, UpdateDateResponse>;
	/**
	 * @generated from protobuf rpc: StreamTasks(task.v1beta.StreamTasksRequest) returns (stream task.v1beta.StreamTasksResponse);
	 */
	streamTasks(
		input: StreamTasksRequest,
		options?: RpcOptions
	): ServerStreamingCall<StreamTasksRequest, StreamTasksResponse>;
}
/**
 * @generated from protobuf service task.v1beta.TaskService
 */
export class TaskServiceClient implements ITaskServiceClient, ServiceInfo {
	typeName = TaskService.typeName;
	methods = TaskService.methods;
	options = TaskService.options;
	constructor(private readonly _transport: RpcTransport) {}
	/**
	 * @generated from protobuf rpc: ListTasks(task.v1beta.ListTasksRequest) returns (task.v1beta.ListTasksResponse);
	 */
	listTasks(
		input: ListTasksRequest,
		options?: RpcOptions
	): UnaryCall<ListTasksRequest, ListTasksResponse> {
		const method = this.methods[0],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<ListTasksRequest, ListTasksResponse>(
			'unary',
			this._transport,
			method,
			opt,
			input
		);
	}
	/**
	 * @generated from protobuf rpc: GetTask(task.v1beta.GetTaskRequest) returns (task.v1beta.GetTaskResponse);
	 */
	getTask(input: GetTaskRequest, options?: RpcOptions): UnaryCall<GetTaskRequest, GetTaskResponse> {
		const method = this.methods[1],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<GetTaskRequest, GetTaskResponse>(
			'unary',
			this._transport,
			method,
			opt,
			input
		);
	}
	/**
	 * @generated from protobuf rpc: CreateTask(task.v1beta.CreateTaskRequest) returns (task.v1beta.CreateTaskResponse);
	 */
	createTask(
		input: CreateTaskRequest,
		options?: RpcOptions
	): UnaryCall<CreateTaskRequest, CreateTaskResponse> {
		const method = this.methods[2],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<CreateTaskRequest, CreateTaskResponse>(
			'unary',
			this._transport,
			method,
			opt,
			input
		);
	}
	/**
	 * @generated from protobuf rpc: UpdateTask(task.v1beta.UpdateTaskRequest) returns (task.v1beta.UpdateTaskResponse);
	 */
	updateTask(
		input: UpdateTaskRequest,
		options?: RpcOptions
	): UnaryCall<UpdateTaskRequest, UpdateTaskResponse> {
		const method = this.methods[3],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<UpdateTaskRequest, UpdateTaskResponse>(
			'unary',
			this._transport,
			method,
			opt,
			input
		);
	}
	/**
	 * @generated from protobuf rpc: DeleteTask(task.v1beta.DeleteTaskRequest) returns (task.v1beta.DeleteTaskResponse);
	 */
	deleteTask(
		input: DeleteTaskRequest,
		options?: RpcOptions
	): UnaryCall<DeleteTaskRequest, DeleteTaskResponse> {
		const method = this.methods[4],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<DeleteTaskRequest, DeleteTaskResponse>(
			'unary',
			this._transport,
			method,
			opt,
			input
		);
	}
	/**
	 * @generated from protobuf rpc: UpdateDate(task.v1beta.UpdateDateRequest) returns (task.v1beta.UpdateDateResponse);
	 */
	updateDate(
		input: UpdateDateRequest,
		options?: RpcOptions
	): UnaryCall<UpdateDateRequest, UpdateDateResponse> {
		const method = this.methods[5],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<UpdateDateRequest, UpdateDateResponse>(
			'unary',
			this._transport,
			method,
			opt,
			input
		);
	}
	/**
	 * @generated from protobuf rpc: StreamTasks(task.v1beta.StreamTasksRequest) returns (stream task.v1beta.StreamTasksResponse);
	 */
	streamTasks(
		input: StreamTasksRequest,
		options?: RpcOptions
	): ServerStreamingCall<StreamTasksRequest, StreamTasksResponse> {
		const method = this.methods[6],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<StreamTasksRequest, StreamTasksResponse>(
			'serverStreaming',
			this._transport,
			method,
			opt,
			input
		);
	}
}
/**
 * @generated from protobuf service task.v1beta.FieldService
 */
export interface IFieldServiceClient {
	/**
	 * @generated from protobuf rpc: AddField(task.v1beta.AddFieldRequest) returns (task.v1beta.AddFieldResponse);
	 */
	addField(
		input: AddFieldRequest,
		options?: RpcOptions
	): UnaryCall<AddFieldRequest, AddFieldResponse>;
	/**
	 * @generated from protobuf rpc: RemoveField(task.v1beta.RemoveFieldRequest) returns (task.v1beta.RemoveFieldResponse);
	 */
	removeField(
		input: RemoveFieldRequest,
		options?: RpcOptions
	): UnaryCall<RemoveFieldRequest, RemoveFieldResponse>;
}
/**
 * @generated from protobuf service task.v1beta.FieldService
 */
export class FieldServiceClient implements IFieldServiceClient, ServiceInfo {
	typeName = FieldService.typeName;
	methods = FieldService.methods;
	options = FieldService.options;
	constructor(private readonly _transport: RpcTransport) {}
	/**
	 * @generated from protobuf rpc: AddField(task.v1beta.AddFieldRequest) returns (task.v1beta.AddFieldResponse);
	 */
	addField(
		input: AddFieldRequest,
		options?: RpcOptions
	): UnaryCall<AddFieldRequest, AddFieldResponse> {
		const method = this.methods[0],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<AddFieldRequest, AddFieldResponse>(
			'unary',
			this._transport,
			method,
			opt,
			input
		);
	}
	/**
	 * @generated from protobuf rpc: RemoveField(task.v1beta.RemoveFieldRequest) returns (task.v1beta.RemoveFieldResponse);
	 */
	removeField(
		input: RemoveFieldRequest,
		options?: RpcOptions
	): UnaryCall<RemoveFieldRequest, RemoveFieldResponse> {
		const method = this.methods[1],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<RemoveFieldRequest, RemoveFieldResponse>(
			'unary',
			this._transport,
			method,
			opt,
			input
		);
	}
}
/**
 * @generated from protobuf service task.v1beta.UsageService
 */
export interface IUsageServiceClient {
	/**
	 * @generated from protobuf rpc: Using(task.v1beta.UsingRequest) returns (task.v1beta.UsingResponse);
	 */
	using(input: UsingRequest, options?: RpcOptions): UnaryCall<UsingRequest, UsingResponse>;
	/**
	 * @generated from protobuf rpc: UsingStream(task.v1beta.UsingStreamRequest) returns (stream task.v1beta.UsingStreamResponse);
	 */
	usingStream(
		input: UsingStreamRequest,
		options?: RpcOptions
	): ServerStreamingCall<UsingStreamRequest, UsingStreamResponse>;
}
/**
 * @generated from protobuf service task.v1beta.UsageService
 */
export class UsageServiceClient implements IUsageServiceClient, ServiceInfo {
	typeName = UsageService.typeName;
	methods = UsageService.methods;
	options = UsageService.options;
	constructor(private readonly _transport: RpcTransport) {}
	/**
	 * @generated from protobuf rpc: Using(task.v1beta.UsingRequest) returns (task.v1beta.UsingResponse);
	 */
	using(input: UsingRequest, options?: RpcOptions): UnaryCall<UsingRequest, UsingResponse> {
		const method = this.methods[0],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<UsingRequest, UsingResponse>(
			'unary',
			this._transport,
			method,
			opt,
			input
		);
	}
	/**
	 * @generated from protobuf rpc: UsingStream(task.v1beta.UsingStreamRequest) returns (stream task.v1beta.UsingStreamResponse);
	 */
	usingStream(
		input: UsingStreamRequest,
		options?: RpcOptions
	): ServerStreamingCall<UsingStreamRequest, UsingStreamResponse> {
		const method = this.methods[1],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<UsingStreamRequest, UsingStreamResponse>(
			'serverStreaming',
			this._transport,
			method,
			opt,
			input
		);
	}
}
