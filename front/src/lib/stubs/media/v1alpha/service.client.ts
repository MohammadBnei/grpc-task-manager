// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "media/v1alpha/service.proto" (package "media.v1alpha", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { MediaService } from "./service";
import type { DeleteMediaResponse } from "./message";
import type { DeleteMediaRequest } from "./message";
import type { UpdateMediaResponse } from "./message";
import type { UpdateMediaRequest } from "./message";
import type { CreateMediaResponse } from "./message";
import type { CreateMediaRequest } from "./message";
import type { GetMediaResponse } from "./message";
import type { GetMediaRequest } from "./message";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListMediasResponse } from "./message";
import type { ListMediasRequest } from "./message";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service media.v1alpha.MediaService
 */
export interface IMediaServiceClient {
    /**
     * @generated from protobuf rpc: ListMedias(media.v1alpha.ListMediasRequest) returns (media.v1alpha.ListMediasResponse);
     */
    listMedias(input: ListMediasRequest, options?: RpcOptions): UnaryCall<ListMediasRequest, ListMediasResponse>;
    /**
     * @generated from protobuf rpc: GetMedia(media.v1alpha.GetMediaRequest) returns (media.v1alpha.GetMediaResponse);
     */
    getMedia(input: GetMediaRequest, options?: RpcOptions): UnaryCall<GetMediaRequest, GetMediaResponse>;
    /**
     * @generated from protobuf rpc: CreateMedia(media.v1alpha.CreateMediaRequest) returns (media.v1alpha.CreateMediaResponse);
     */
    createMedia(input: CreateMediaRequest, options?: RpcOptions): UnaryCall<CreateMediaRequest, CreateMediaResponse>;
    /**
     * @generated from protobuf rpc: UpdateMedia(media.v1alpha.UpdateMediaRequest) returns (media.v1alpha.UpdateMediaResponse);
     */
    updateMedia(input: UpdateMediaRequest, options?: RpcOptions): UnaryCall<UpdateMediaRequest, UpdateMediaResponse>;
    /**
     * @generated from protobuf rpc: DeleteMedia(media.v1alpha.DeleteMediaRequest) returns (media.v1alpha.DeleteMediaResponse);
     */
    deleteMedia(input: DeleteMediaRequest, options?: RpcOptions): UnaryCall<DeleteMediaRequest, DeleteMediaResponse>;
}
/**
 * @generated from protobuf service media.v1alpha.MediaService
 */
export class MediaServiceClient implements IMediaServiceClient, ServiceInfo {
    typeName = MediaService.typeName;
    methods = MediaService.methods;
    options = MediaService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ListMedias(media.v1alpha.ListMediasRequest) returns (media.v1alpha.ListMediasResponse);
     */
    listMedias(input: ListMediasRequest, options?: RpcOptions): UnaryCall<ListMediasRequest, ListMediasResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListMediasRequest, ListMediasResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetMedia(media.v1alpha.GetMediaRequest) returns (media.v1alpha.GetMediaResponse);
     */
    getMedia(input: GetMediaRequest, options?: RpcOptions): UnaryCall<GetMediaRequest, GetMediaResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetMediaRequest, GetMediaResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateMedia(media.v1alpha.CreateMediaRequest) returns (media.v1alpha.CreateMediaResponse);
     */
    createMedia(input: CreateMediaRequest, options?: RpcOptions): UnaryCall<CreateMediaRequest, CreateMediaResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateMediaRequest, CreateMediaResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateMedia(media.v1alpha.UpdateMediaRequest) returns (media.v1alpha.UpdateMediaResponse);
     */
    updateMedia(input: UpdateMediaRequest, options?: RpcOptions): UnaryCall<UpdateMediaRequest, UpdateMediaResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateMediaRequest, UpdateMediaResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteMedia(media.v1alpha.DeleteMediaRequest) returns (media.v1alpha.DeleteMediaResponse);
     */
    deleteMedia(input: DeleteMediaRequest, options?: RpcOptions): UnaryCall<DeleteMediaRequest, DeleteMediaResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteMediaRequest, DeleteMediaResponse>("unary", this._transport, method, opt, input);
    }
}
