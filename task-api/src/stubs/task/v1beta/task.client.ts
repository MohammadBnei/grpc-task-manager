// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "task/v1beta/task.proto" (package "task.v1beta", syntax proto3)
// tslint:disable
import { UsageService } from "./task";
import type { UsageResponse } from "./task";
import type { UsageRequest } from "./task";
import { FieldService } from "./task";
import type { RemoveFieldRequest } from "./task";
import type { AddFieldRequest } from "./task";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TaskService } from "./task";
import type { StreamTasksResponse } from "./task";
import type { StreamTasksRequest } from "./task";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { UpdateDateRequest } from "./task";
import type { DeleteTaskRequest } from "./task";
import type { UpdateTaskRequest } from "./task";
import type { CreateTaskRequest } from "./task";
import type { TaskResponse } from "./task";
import type { GetTaskRequest } from "./task";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListTasksResponse } from "./task";
import type { ListTasksRequest } from "./task";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service task.v1beta.TaskService
 */
export interface ITaskServiceClient {
    /**
     * @generated from protobuf rpc: ListTasks(task.v1beta.ListTasksRequest) returns (task.v1beta.ListTasksResponse);
     */
    listTasks(input: ListTasksRequest, options?: RpcOptions): UnaryCall<ListTasksRequest, ListTasksResponse>;
    /**
     * @generated from protobuf rpc: GetTask(task.v1beta.GetTaskRequest) returns (task.v1beta.TaskResponse);
     */
    getTask(input: GetTaskRequest, options?: RpcOptions): UnaryCall<GetTaskRequest, TaskResponse>;
    /**
     * @generated from protobuf rpc: CreateTask(task.v1beta.CreateTaskRequest) returns (task.v1beta.TaskResponse);
     */
    createTask(input: CreateTaskRequest, options?: RpcOptions): UnaryCall<CreateTaskRequest, TaskResponse>;
    /**
     * @generated from protobuf rpc: UpdateTask(task.v1beta.UpdateTaskRequest) returns (task.v1beta.TaskResponse);
     */
    updateTask(input: UpdateTaskRequest, options?: RpcOptions): UnaryCall<UpdateTaskRequest, TaskResponse>;
    /**
     * @generated from protobuf rpc: DeleteTask(task.v1beta.DeleteTaskRequest) returns (task.v1beta.TaskResponse);
     */
    deleteTask(input: DeleteTaskRequest, options?: RpcOptions): UnaryCall<DeleteTaskRequest, TaskResponse>;
    /**
     * @generated from protobuf rpc: UpdateDate(task.v1beta.UpdateDateRequest) returns (task.v1beta.TaskResponse);
     */
    updateDate(input: UpdateDateRequest, options?: RpcOptions): UnaryCall<UpdateDateRequest, TaskResponse>;
    /**
     * @generated from protobuf rpc: StreamTasks(task.v1beta.StreamTasksRequest) returns (stream task.v1beta.StreamTasksResponse);
     */
    streamTasks(input: StreamTasksRequest, options?: RpcOptions): ServerStreamingCall<StreamTasksRequest, StreamTasksResponse>;
}
/**
 * @generated from protobuf service task.v1beta.TaskService
 */
export class TaskServiceClient implements ITaskServiceClient, ServiceInfo {
    typeName = TaskService.typeName;
    methods = TaskService.methods;
    options = TaskService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ListTasks(task.v1beta.ListTasksRequest) returns (task.v1beta.ListTasksResponse);
     */
    listTasks(input: ListTasksRequest, options?: RpcOptions): UnaryCall<ListTasksRequest, ListTasksResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListTasksRequest, ListTasksResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTask(task.v1beta.GetTaskRequest) returns (task.v1beta.TaskResponse);
     */
    getTask(input: GetTaskRequest, options?: RpcOptions): UnaryCall<GetTaskRequest, TaskResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTaskRequest, TaskResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateTask(task.v1beta.CreateTaskRequest) returns (task.v1beta.TaskResponse);
     */
    createTask(input: CreateTaskRequest, options?: RpcOptions): UnaryCall<CreateTaskRequest, TaskResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateTaskRequest, TaskResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateTask(task.v1beta.UpdateTaskRequest) returns (task.v1beta.TaskResponse);
     */
    updateTask(input: UpdateTaskRequest, options?: RpcOptions): UnaryCall<UpdateTaskRequest, TaskResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateTaskRequest, TaskResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteTask(task.v1beta.DeleteTaskRequest) returns (task.v1beta.TaskResponse);
     */
    deleteTask(input: DeleteTaskRequest, options?: RpcOptions): UnaryCall<DeleteTaskRequest, TaskResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteTaskRequest, TaskResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateDate(task.v1beta.UpdateDateRequest) returns (task.v1beta.TaskResponse);
     */
    updateDate(input: UpdateDateRequest, options?: RpcOptions): UnaryCall<UpdateDateRequest, TaskResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateDateRequest, TaskResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StreamTasks(task.v1beta.StreamTasksRequest) returns (stream task.v1beta.StreamTasksResponse);
     */
    streamTasks(input: StreamTasksRequest, options?: RpcOptions): ServerStreamingCall<StreamTasksRequest, StreamTasksResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamTasksRequest, StreamTasksResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service task.v1beta.FieldService
 */
export interface IFieldServiceClient {
    /**
     * @generated from protobuf rpc: AddField(task.v1beta.AddFieldRequest) returns (task.v1beta.TaskResponse);
     */
    addField(input: AddFieldRequest, options?: RpcOptions): UnaryCall<AddFieldRequest, TaskResponse>;
    /**
     * @generated from protobuf rpc: RemoveField(task.v1beta.RemoveFieldRequest) returns (task.v1beta.TaskResponse);
     */
    removeField(input: RemoveFieldRequest, options?: RpcOptions): UnaryCall<RemoveFieldRequest, TaskResponse>;
}
/**
 * @generated from protobuf service task.v1beta.FieldService
 */
export class FieldServiceClient implements IFieldServiceClient, ServiceInfo {
    typeName = FieldService.typeName;
    methods = FieldService.methods;
    options = FieldService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: AddField(task.v1beta.AddFieldRequest) returns (task.v1beta.TaskResponse);
     */
    addField(input: AddFieldRequest, options?: RpcOptions): UnaryCall<AddFieldRequest, TaskResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddFieldRequest, TaskResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RemoveField(task.v1beta.RemoveFieldRequest) returns (task.v1beta.TaskResponse);
     */
    removeField(input: RemoveFieldRequest, options?: RpcOptions): UnaryCall<RemoveFieldRequest, TaskResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemoveFieldRequest, TaskResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service task.v1beta.UsageService
 */
export interface IUsageServiceClient {
    /**
     * @generated from protobuf rpc: Using(task.v1beta.UsageRequest) returns (task.v1beta.UsageResponse);
     */
    using(input: UsageRequest, options?: RpcOptions): UnaryCall<UsageRequest, UsageResponse>;
    /**
     * @generated from protobuf rpc: UsingStream(task.v1beta.UsageRequest) returns (stream task.v1beta.UsageResponse);
     */
    usingStream(input: UsageRequest, options?: RpcOptions): ServerStreamingCall<UsageRequest, UsageResponse>;
}
/**
 * @generated from protobuf service task.v1beta.UsageService
 */
export class UsageServiceClient implements IUsageServiceClient, ServiceInfo {
    typeName = UsageService.typeName;
    methods = UsageService.methods;
    options = UsageService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Using(task.v1beta.UsageRequest) returns (task.v1beta.UsageResponse);
     */
    using(input: UsageRequest, options?: RpcOptions): UnaryCall<UsageRequest, UsageResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<UsageRequest, UsageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UsingStream(task.v1beta.UsageRequest) returns (stream task.v1beta.UsageResponse);
     */
    usingStream(input: UsageRequest, options?: RpcOptions): ServerStreamingCall<UsageRequest, UsageResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UsageRequest, UsageResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
