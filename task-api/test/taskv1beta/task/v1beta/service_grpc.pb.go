// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: task/v1beta/service.proto

package taskv1beta

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TaskService_ListTasks_FullMethodName   = "/task.v1beta.TaskService/ListTasks"
	TaskService_GetTask_FullMethodName     = "/task.v1beta.TaskService/GetTask"
	TaskService_CreateTask_FullMethodName  = "/task.v1beta.TaskService/CreateTask"
	TaskService_UpdateTask_FullMethodName  = "/task.v1beta.TaskService/UpdateTask"
	TaskService_DeleteTask_FullMethodName  = "/task.v1beta.TaskService/DeleteTask"
	TaskService_UpdateDate_FullMethodName  = "/task.v1beta.TaskService/UpdateDate"
	TaskService_StreamTasks_FullMethodName = "/task.v1beta.TaskService/StreamTasks"
)

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceClient interface {
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error)
	UpdateDate(ctx context.Context, in *UpdateDateRequest, opts ...grpc.CallOption) (*UpdateDateResponse, error)
	StreamTasks(ctx context.Context, in *StreamTasksRequest, opts ...grpc.CallOption) (TaskService_StreamTasksClient, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	out := new(ListTasksResponse)
	err := c.cc.Invoke(ctx, TaskService_ListTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, TaskService_GetTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, TaskService_CreateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error) {
	out := new(UpdateTaskResponse)
	err := c.cc.Invoke(ctx, TaskService_UpdateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error) {
	out := new(DeleteTaskResponse)
	err := c.cc.Invoke(ctx, TaskService_DeleteTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpdateDate(ctx context.Context, in *UpdateDateRequest, opts ...grpc.CallOption) (*UpdateDateResponse, error) {
	out := new(UpdateDateResponse)
	err := c.cc.Invoke(ctx, TaskService_UpdateDate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) StreamTasks(ctx context.Context, in *StreamTasksRequest, opts ...grpc.CallOption) (TaskService_StreamTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &TaskService_ServiceDesc.Streams[0], TaskService_StreamTasks_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &taskServiceStreamTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskService_StreamTasksClient interface {
	Recv() (*StreamTasksResponse, error)
	grpc.ClientStream
}

type taskServiceStreamTasksClient struct {
	grpc.ClientStream
}

func (x *taskServiceStreamTasksClient) Recv() (*StreamTasksResponse, error) {
	m := new(StreamTasksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility
type TaskServiceServer interface {
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error)
	UpdateDate(context.Context, *UpdateDateRequest) (*UpdateDateResponse, error)
	StreamTasks(*StreamTasksRequest, TaskService_StreamTasksServer) error
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (UnimplementedTaskServiceServer) ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedTaskServiceServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskServiceServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskServiceServer) UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedTaskServiceServer) DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedTaskServiceServer) UpdateDate(context.Context, *UpdateDateRequest) (*UpdateDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDate not implemented")
}
func (UnimplementedTaskServiceServer) StreamTasks(*StreamTasksRequest, TaskService_StreamTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTasks not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpdateDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpdateDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_UpdateDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpdateDate(ctx, req.(*UpdateDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_StreamTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTasksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskServiceServer).StreamTasks(m, &taskServiceStreamTasksServer{stream})
}

type TaskService_StreamTasksServer interface {
	Send(*StreamTasksResponse) error
	grpc.ServerStream
}

type taskServiceStreamTasksServer struct {
	grpc.ServerStream
}

func (x *taskServiceStreamTasksServer) Send(m *StreamTasksResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task.v1beta.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTasks",
			Handler:    _TaskService_ListTasks_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _TaskService_GetTask_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _TaskService_CreateTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _TaskService_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _TaskService_DeleteTask_Handler,
		},
		{
			MethodName: "UpdateDate",
			Handler:    _TaskService_UpdateDate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTasks",
			Handler:       _TaskService_StreamTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "task/v1beta/service.proto",
}

const (
	FieldService_AddField_FullMethodName    = "/task.v1beta.FieldService/AddField"
	FieldService_RemoveField_FullMethodName = "/task.v1beta.FieldService/RemoveField"
)

// FieldServiceClient is the client API for FieldService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FieldServiceClient interface {
	AddField(ctx context.Context, in *AddFieldRequest, opts ...grpc.CallOption) (*AddFieldResponse, error)
	RemoveField(ctx context.Context, in *RemoveFieldRequest, opts ...grpc.CallOption) (*RemoveFieldResponse, error)
}

type fieldServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFieldServiceClient(cc grpc.ClientConnInterface) FieldServiceClient {
	return &fieldServiceClient{cc}
}

func (c *fieldServiceClient) AddField(ctx context.Context, in *AddFieldRequest, opts ...grpc.CallOption) (*AddFieldResponse, error) {
	out := new(AddFieldResponse)
	err := c.cc.Invoke(ctx, FieldService_AddField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldServiceClient) RemoveField(ctx context.Context, in *RemoveFieldRequest, opts ...grpc.CallOption) (*RemoveFieldResponse, error) {
	out := new(RemoveFieldResponse)
	err := c.cc.Invoke(ctx, FieldService_RemoveField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FieldServiceServer is the server API for FieldService service.
// All implementations must embed UnimplementedFieldServiceServer
// for forward compatibility
type FieldServiceServer interface {
	AddField(context.Context, *AddFieldRequest) (*AddFieldResponse, error)
	RemoveField(context.Context, *RemoveFieldRequest) (*RemoveFieldResponse, error)
	mustEmbedUnimplementedFieldServiceServer()
}

// UnimplementedFieldServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFieldServiceServer struct {
}

func (UnimplementedFieldServiceServer) AddField(context.Context, *AddFieldRequest) (*AddFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddField not implemented")
}
func (UnimplementedFieldServiceServer) RemoveField(context.Context, *RemoveFieldRequest) (*RemoveFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveField not implemented")
}
func (UnimplementedFieldServiceServer) mustEmbedUnimplementedFieldServiceServer() {}

// UnsafeFieldServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FieldServiceServer will
// result in compilation errors.
type UnsafeFieldServiceServer interface {
	mustEmbedUnimplementedFieldServiceServer()
}

func RegisterFieldServiceServer(s grpc.ServiceRegistrar, srv FieldServiceServer) {
	s.RegisterService(&FieldService_ServiceDesc, srv)
}

func _FieldService_AddField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldServiceServer).AddField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FieldService_AddField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldServiceServer).AddField(ctx, req.(*AddFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldService_RemoveField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldServiceServer).RemoveField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FieldService_RemoveField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldServiceServer).RemoveField(ctx, req.(*RemoveFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FieldService_ServiceDesc is the grpc.ServiceDesc for FieldService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FieldService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task.v1beta.FieldService",
	HandlerType: (*FieldServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddField",
			Handler:    _FieldService_AddField_Handler,
		},
		{
			MethodName: "RemoveField",
			Handler:    _FieldService_RemoveField_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task/v1beta/service.proto",
}

const (
	UsageService_Using_FullMethodName       = "/task.v1beta.UsageService/Using"
	UsageService_UsingStream_FullMethodName = "/task.v1beta.UsageService/UsingStream"
)

// UsageServiceClient is the client API for UsageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsageServiceClient interface {
	Using(ctx context.Context, in *UsingRequest, opts ...grpc.CallOption) (*UsingResponse, error)
	UsingStream(ctx context.Context, in *UsingStreamRequest, opts ...grpc.CallOption) (UsageService_UsingStreamClient, error)
}

type usageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsageServiceClient(cc grpc.ClientConnInterface) UsageServiceClient {
	return &usageServiceClient{cc}
}

func (c *usageServiceClient) Using(ctx context.Context, in *UsingRequest, opts ...grpc.CallOption) (*UsingResponse, error) {
	out := new(UsingResponse)
	err := c.cc.Invoke(ctx, UsageService_Using_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) UsingStream(ctx context.Context, in *UsingStreamRequest, opts ...grpc.CallOption) (UsageService_UsingStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UsageService_ServiceDesc.Streams[0], UsageService_UsingStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &usageServiceUsingStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UsageService_UsingStreamClient interface {
	Recv() (*UsingStreamResponse, error)
	grpc.ClientStream
}

type usageServiceUsingStreamClient struct {
	grpc.ClientStream
}

func (x *usageServiceUsingStreamClient) Recv() (*UsingStreamResponse, error) {
	m := new(UsingStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UsageServiceServer is the server API for UsageService service.
// All implementations must embed UnimplementedUsageServiceServer
// for forward compatibility
type UsageServiceServer interface {
	Using(context.Context, *UsingRequest) (*UsingResponse, error)
	UsingStream(*UsingStreamRequest, UsageService_UsingStreamServer) error
	mustEmbedUnimplementedUsageServiceServer()
}

// UnimplementedUsageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsageServiceServer struct {
}

func (UnimplementedUsageServiceServer) Using(context.Context, *UsingRequest) (*UsingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Using not implemented")
}
func (UnimplementedUsageServiceServer) UsingStream(*UsingStreamRequest, UsageService_UsingStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UsingStream not implemented")
}
func (UnimplementedUsageServiceServer) mustEmbedUnimplementedUsageServiceServer() {}

// UnsafeUsageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsageServiceServer will
// result in compilation errors.
type UnsafeUsageServiceServer interface {
	mustEmbedUnimplementedUsageServiceServer()
}

func RegisterUsageServiceServer(s grpc.ServiceRegistrar, srv UsageServiceServer) {
	s.RegisterService(&UsageService_ServiceDesc, srv)
}

func _UsageService_Using_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).Using(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageService_Using_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).Using(ctx, req.(*UsingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_UsingStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UsingStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsageServiceServer).UsingStream(m, &usageServiceUsingStreamServer{stream})
}

type UsageService_UsingStreamServer interface {
	Send(*UsingStreamResponse) error
	grpc.ServerStream
}

type usageServiceUsingStreamServer struct {
	grpc.ServerStream
}

func (x *usageServiceUsingStreamServer) Send(m *UsingStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// UsageService_ServiceDesc is the grpc.ServiceDesc for UsageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task.v1beta.UsageService",
	HandlerType: (*UsageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Using",
			Handler:    _UsageService_Using_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UsingStream",
			Handler:       _UsageService_UsingStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "task/v1beta/service.proto",
}
